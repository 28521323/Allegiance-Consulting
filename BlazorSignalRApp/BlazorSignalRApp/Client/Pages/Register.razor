@page "/register"
@using Microsoft.AspNetCore.SignalR.Client
@using Pages;
@inject NavigationManager UriHelper
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="form-group">
    <label>
        Name:
        <input @bind="NameInput" />
        Surname:
        <input @bind="SNameInput" />
    </label>
</div>

<div class="form-group">
    <label>
        UserName:
        <input @bind="userInput" />

    </label>
</div>
<button @onclick=@Navigate disabled="@(!IsConnected)">Start<br> Chat </button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>



@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    public string userInput = "";
    private string NameInput = "";
    private string SNameInput = "";
    private string messageInput = "";
    void Navigate()
    {
        if (NameInput == "")
        {
            messages.Add("Please provide a Name");
        }
        if (userInput == "")
        {
            messages.Add("Please provide a Username");
        }
        if ((NameInput != "") && (userInput != ""))
            UriHelper.NavigateTo("/chat/" + userInput);
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}