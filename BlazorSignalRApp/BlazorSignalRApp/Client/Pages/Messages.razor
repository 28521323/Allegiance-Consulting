@page "/chat/{userInput}"
@using Pages
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager UriHelper
@inject NavigationManager NavigationManager
@implements IDisposable

<ul id="messagesList">
    @foreach (var message in messages)
    {
        if (nameReceive == NameInput)
        {
            <li><div style="text-align: left"> @message</div></li>
        }
        if (nameReceive != NameInput)
        {
            <li><div style="text-align: center"> @message @DateTime.Now</div></li>
        }


    }
</ul>

<div class="fixed-bottom form-group" style="text-align: center">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
                         
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </label>
</div>

<hr>



@code {
    [Parameter]
    public string userInput { get; set; }

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    string clear = "";
    private string NameInput;
    private string SNameInput;
    private string messageInput;
    private string nameReceive;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messageInput = "";
            nameReceive = user;
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg+ "                      ");
            StateHasChanged();

        });

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}